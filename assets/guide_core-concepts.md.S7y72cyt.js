import{_ as o,c as t,o as i,ae as s}from"./chunks/framework.BZhVCv8B.js";const u=JSON.parse('{"title":"Core Concepts","description":"","frontmatter":{},"headers":[],"relativePath":"guide/core-concepts.md","filePath":"guide/core-concepts.md"}'),n={name:"guide/core-concepts.md"};function a(l,e,r,d,c,p){return i(),t("div",null,e[0]||(e[0]=[s(`<h1 id="core-concepts" tabindex="-1">Core Concepts <a class="header-anchor" href="#core-concepts" aria-label="Permalink to &quot;Core Concepts&quot;">​</a></h1><p>Understanding these core concepts will help you make the most of <code>Vue Floating UI Tour</code>.</p><h2 id="_1-the-tour-controller" tabindex="-1">1. The Tour Controller <a class="header-anchor" href="#_1-the-tour-controller" aria-label="Permalink to &quot;1. The Tour Controller&quot;">​</a></h2><p>At the heart of the library is the <code>TourController</code>. While you typically interact with the tour via the <code>useTour</code> composable in Vue, the controller is responsible for all the underlying logic:</p><ul><li>Managing the list of tour steps.</li><li>Tracking the current active step.</li><li>Handling the display and positioning of popovers using <code>@floating-ui/dom</code>.</li><li>Managing target element highlighting and the screen overlay.</li><li>Executing lifecycle callback functions.</li></ul><p>You&#39;ll encounter a reference to the <code>TourControllerPublic</code> interface in various callback functions, allowing you to access tour state and methods from within those callbacks.</p><h2 id="_2-defining-tour-steps-tourstepdefinition" tabindex="-1">2. Defining Tour Steps (<code>TourStepDefinition</code>) <a class="header-anchor" href="#_2-defining-tour-steps-tourstepdefinition" aria-label="Permalink to &quot;2. Defining Tour Steps (\`TourStepDefinition\`)&quot;">​</a></h2><p>Each step in your tour is defined by an object conforming to the <code>TourStepDefinition</code> interface. This is the primary way you describe what each part of your tour should look like and how it should behave.</p><p>Key properties include:</p><ul><li><code>target: string | HTMLElement</code>: The most crucial property. It specifies which element on the page the tour step&#39;s popover should point to. This can be a CSS selector string (e.g., <code>&#39;#myButton&#39;</code>, <code>&#39;.user-profile&#39;</code>) or a direct <code>HTMLElement</code> object.</li><li><code>content: string | ((step: TourStep, index: number, tour: TourControllerPublic) =&gt; string | HTMLElement)</code>: The content displayed inside the popover. You can provide: <ul><li>A simple string (HTML is allowed).</li><li>A function that returns a string or an <code>HTMLElement</code>. This function receives the current <code>step</code> object, its <code>index</code>, and the <code>tour</code> controller instance, allowing for dynamic content.</li></ul></li><li><code>title?: string</code>: An optional title for the popover.</li><li><code>placement?: Placement</code>: (from <code>@floating-ui/dom</code>) Determines the popover&#39;s position relative to the target (e.g., <code>&#39;top&#39;</code>, <code>&#39;bottom-start&#39;</code>, <code>&#39;right-end&#39;</code>). Defaults to the <code>defaultPlacement</code> in <code>TourOptions</code> or <code>&#39;bottom&#39;</code>.</li><li><code>id?: string</code>: An optional unique identifier for the step. Useful for navigating directly to this step using <code>jumpTo(stepId)</code>. If not provided, a unique ID is generated automatically.</li><li><code>offsetValue?: number</code>: Specifies the distance (in pixels) between the target element and the popover. Defaults to <code>defaultOffset</code> in <code>TourOptions</code> or <code>10</code>.</li><li><code>middleware?: Middleware[]</code>: (from <code>@floating-ui/dom</code>) For advanced users, you can provide an array of <code>@floating-ui/dom</code> middleware functions to customize positioning behavior (e.g., <code>shift()</code>, <code>flip()</code>, custom middleware).</li><li><strong>Lifecycle Hooks</strong>: Functions that allow you to run code at specific points in a step&#39;s lifecycle: <ul><li><code>onBeforeShow?: (step, index, tour) =&gt; void | boolean</code>: Called before a step is shown. Return <code>false</code> to prevent the step from showing and potentially skip to the next.</li><li><code>onAfterShow?: (step, index, tour) =&gt; void</code>: Called after a step (popover and highlight) has been shown.</li><li><code>onBeforeHide?: (step, index, tour) =&gt; void | boolean</code>: Called before a step is hidden. Return <code>false</code> to prevent the step from hiding (note: this might interfere with tour progression unless handled carefully).</li><li><code>onAfterHide?: (step, index, tour) =&gt; void</code>: Called after a step has been hidden.</li></ul></li></ul><p><em>(A more detailed breakdown of <code>TourStepDefinition</code> properties can be found in the <a href="/floating-ui-tour/reference/types.html">API Reference - Types</a>).</em></p><h2 id="_3-configuring-the-tour-touroptions" tabindex="-1">3. Configuring the Tour (<code>TourOptions</code>) <a class="header-anchor" href="#_3-configuring-the-tour-touroptions" aria-label="Permalink to &quot;3. Configuring the Tour (\`TourOptions\`)&quot;">​</a></h2><p>When initializing the tour with <code>useTour(steps, options)</code>, you can provide an <code>options</code> object to configure the default behavior and appearance for the entire tour. Many of these options can also be overridden on a per-step basis within a <code>TourStepDefinition</code>.</p><p>Key options include:</p><ul><li><code>defaultPlacement?: Placement</code>: The default placement for all popovers if not specified in the step definition (e.g., <code>&#39;bottom&#39;</code>).</li><li><code>defaultOffset?: number</code>: The default offset (in pixels) for all popovers (default is <code>10</code>).</li><li><code>popoverClass?: string</code>: A CSS class to apply to all popover elements (default: <code>&#39;v-tour__popover&#39;</code>).</li><li><code>arrowClass?: string</code>: A CSS class for the popover&#39;s arrow element (default: <code>&#39;v-tour__arrow&#39;</code>). An arrow element must exist within your popover structure if you use this.</li><li><code>highlightTarget?: boolean</code>: Whether to highlight the target element for each step (default: <code>true</code>).</li><li><code>highlightClass?: string</code>: A CSS class to apply to the highlighted target element (default: <code>&#39;v-tour__highlighted-target&#39;</code>).</li><li><code>overlayClass?: string</code>: A CSS class for the full-screen overlay (default: <code>&#39;v-tour__overlay&#39;</code>).</li><li><code>overlayColor?: string</code>: The background color for the overlay (e.g., <code>&#39;rgba(0,0,0,0.3)&#39;</code>). This is used to create the &quot;punch-hole&quot; effect if <code>highlightTarget</code> is true.</li><li><code>padding?: number</code>: Padding used by <code>@floating-ui/dom</code> middleware like <code>flip</code> and <code>shift</code> to keep the popover within viewport boundaries (default: <code>8</code>).</li><li><code>renderPopover?: (step, actions, tour) =&gt; HTMLElement</code>: A powerful function to completely customize the rendering of the popover. It should return an <code>HTMLElement</code>. <ul><li><code>step</code>: The current <code>TourStep</code> object.</li><li><code>actions</code>: An object with methods <code>{ next: () =&gt; void; prev: () =&gt; void; finish: () =&gt; void }</code> to control tour navigation from your custom popover.</li><li><code>tour</code>: The <code>TourControllerPublic</code> instance.</li></ul></li><li><strong>Global Lifecycle Hooks</strong>: <ul><li><code>onTourStart?: (tour: TourControllerPublic) =&gt; void</code>: Called when the tour starts.</li><li><code>onTourEnd?: (tour: TourControllerPublic) =&gt; void</code>: Called when the tour ends.</li><li><code>onStepChange?: (newStep: TourStep | null, oldStep: TourStep | null, tour: TourControllerPublic) =&gt; void</code>: Called whenever the current step changes. <code>newStep</code> will be <code>null</code> if the tour ends, and <code>oldStep</code> will be <code>null</code> if the tour starts.</li></ul></li></ul><p><em>(A more detailed breakdown of <code>TourOptions</code> can be found in the <a href="/floating-ui-tour/reference/types.html">API Reference - Types</a>).</em></p><h2 id="_4-the-usetour-composable" tabindex="-1">4. The <code>useTour</code> Composable <a class="header-anchor" href="#_4-the-usetour-composable" aria-label="Permalink to &quot;4. The \`useTour\` Composable&quot;">​</a></h2><p>This is your primary interface for interacting with the tour library in a Vue 3 component.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useTour } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@dev_mat/floating-ui-tour&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Reactive State</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Contains isActive, currentStepIndex, currentStep, totalSteps</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Control Methods</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  defineSteps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  prev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  jumpTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  updateOptions</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // New in controller, should be exposed if needed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useTour</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initialSteps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>state: A readonly, reactive object providing the current status of the tour. Ideal for conditionally rendering UI or reacting to tour changes.</p><p>Control Methods: Functions to manage the tour flow (see API Reference for details). By understanding these concepts, you can create highly effective and customized product tours for your users.</p>`,21)]))}const g=o(n,[["render",a]]);export{u as __pageData,g as default};
