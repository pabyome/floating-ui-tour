import{_ as t,c as i,o,ae as s}from"./chunks/framework.BZhVCv8B.js";const u=JSON.parse('{"title":"API Reference","description":"","frontmatter":{},"headers":[],"relativePath":"reference/api.md","filePath":"reference/api.md"}'),n={name:"reference/api.md"};function r(a,e,l,d,c,p){return o(),i("div",null,e[0]||(e[0]=[s(`<h1 id="api-reference" tabindex="-1">API Reference <a class="header-anchor" href="#api-reference" aria-label="Permalink to &quot;API Reference&quot;">​</a></h1><p>This section provides a detailed reference for the <code>vue-floating-ui-tour</code> library&#39;s public API.</p><h2 id="usetour" tabindex="-1"><code>useTour()</code> <a class="header-anchor" href="#usetour" aria-label="Permalink to &quot;\`useTour()\`&quot;">​</a></h2><p>The primary way to interact with the tour functionality is through the <code>useTour</code> composable.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useTour } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@dev_mat/floating-ui-tour&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  defineSteps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  prev</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  jumpTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useTour</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(initialSteps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p>The <code>useTour</code> function can be called with optional initial steps and configuration options:</p><ul><li><p><strong><code>initialSteps?: TourStepDefinition[]</code></strong></p><ul><li><strong>Type:</strong> <code>TourStepDefinition[]</code></li><li><strong>Default:</strong> <code>[]</code> (empty array)</li><li><strong>Description:</strong> An optional array of <code>TourStepDefinition</code> objects to initialize the tour with. If provided, these steps will be immediately available to the tour controller.</li></ul></li><li><p><strong><code>options?: TourOptions</code></strong></p><ul><li><p><strong>Type:</strong> <code>TourOptions</code></p></li><li><p><strong>Default:</strong> See individual options in <code>TourOptions</code> type definition.</p></li><li><p><strong>Description:</strong> An optional object to configure the default behavior and appearance of the tour. These options can be overridden on a per-step basis where applicable.</p></li></ul></li></ul><h3 id="return-value" tabindex="-1">Return Value <a class="header-anchor" href="#return-value" aria-label="Permalink to &quot;Return Value&quot;">​</a></h3><p>The <code>useTour</code> composable returns an object (<code>UseTourReturnType</code>) containing the tour&#39;s reactive state and control methods:</p><ul><li><p><strong><code>state: Readonly&lt;TourReactiveState&gt;</code></strong></p><ul><li>A readonly, reactive object representing the current state of the tour.</li><li><strong>Properties:</strong><ul><li><code>isActive: boolean</code>: Indicates if the tour is currently active.</li><li><code>currentStepIndex: number</code>: The zero-based index of the currently displayed step. It is <code>-1</code> if no step is active or the tour has not started.</li><li><code>currentStep: TourStep | null</code>: The <code>TourStep</code> object for the currently active step, or <code>null</code> if the tour is not active or has ended.</li><li><code>totalSteps: number</code>: The total number of steps currently defined for the tour.</li></ul></li></ul></li><li><p><strong><code>defineSteps(steps: TourStepDefinition[]): void</code></strong></p><ul><li>Defines or redefines the sequence of steps for the tour. Calling this while a tour is active will update the steps; if the <code>currentStepIndex</code> becomes invalid, the tour may end or attempt to adjust.</li><li><strong>Parameters:</strong><ul><li><code>steps: TourStepDefinition[]</code>: An array of <code>TourStepDefinition</code> objects.</li></ul></li></ul></li><li><p><strong><code>start(index?: number): void</code></strong></p><ul><li>Starts the tour. If steps are defined, it will show the first step or the step at the specified <code>index</code>.</li><li><strong>Parameters:</strong><ul><li><code>index?: number</code>: Optional. The zero-based index of the step from which to start the tour. Defaults to <code>0</code>.</li></ul></li></ul></li><li><p><strong><code>next(): void</code></strong></p><ul><li>Advances the tour to the next step in the sequence. If the current step is the last one, calling <code>next()</code> will end the tour.</li></ul></li><li><p><strong><code>prev(): void</code></strong></p><ul><li>Moves the tour to the previous step in the sequence. Does nothing if the current step is the first one.</li></ul></li><li><p><strong><code>jumpTo(stepIdOrIndex: string | number): void</code></strong></p><ul><li>Navigates the tour directly to a specific step.</li><li><strong>Parameters:</strong><ul><li><code>stepIdOrIndex: string | number</code>: The <code>id</code> of the target step (if an <code>id</code> was provided in its <code>TourStepDefinition</code>) or its zero-based numerical index.</li></ul></li></ul></li><li><p><strong><code>end(): void</code></strong></p><ul><li>Stops the tour, hides the current popover and overlay, and resets the tour state.</li></ul></li></ul><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h2><p>The library exports several TypeScript interfaces and types to help with integration and provide strong typing for tour configurations.</p><ul><li><p><strong><code>TourStepDefinition</code></strong></p><ul><li>The interface for defining an individual step in the tour.</li><li>Key properties include <code>target</code>, <code>content</code>, <code>title</code>, <code>placement</code>, <code>offsetValue</code>, <code>middleware</code>, <code>id</code>, and lifecycle hooks (<code>onBeforeShow</code>, <code>onAfterShow</code>, etc.).</li><li>Refer to the <a href="/floating-ui-tour/guide/core-concepts.html#defining-tour-steps-tourstepdefinition">Core Concepts &gt; Defining Tour Steps</a> section for a detailed breakdown of its properties.</li></ul></li><li><p><strong><code>TourOptions</code></strong></p><ul><li>The interface for configuring the overall tour behavior and default appearance.</li><li>Key properties include <code>defaultPlacement</code>, <code>defaultOffset</code>, <code>popoverClass</code>, <code>arrowClass</code>, <code>highlightTarget</code>, <code>overlayColor</code>, global lifecycle hooks (<code>onTourStart</code>, <code>onTourEnd</code>, <code>onStepChange</code>), and <code>renderPopover</code>.</li><li>Refer to the <a href="/floating-ui-tour/guide/core-concepts.html#configuring-the-tour-touroptions">Core Concepts &gt; Configuring the Tour</a> section for details.</li></ul></li><li><p><strong><code>TourStep</code></strong></p><ul><li>The interface representing a tour step once it has been processed by the tour controller (e.g., it will always have an <code>id</code>). This is the type of step object passed to callbacks like <code>onAfterShow</code>.</li></ul></li><li><p><strong><code>TourControllerPublic</code></strong></p><ul><li>An interface representing the public API of the underlying tour controller instance. This object is passed to various callback functions (e.g., <code>onStepChange</code>, <code>renderPopover</code>, step lifecycle hooks), allowing access to the tour&#39;s current state and methods from within those callbacks.</li></ul></li><li><p><strong><code>Placement</code></strong></p><ul><li><strong>Type:</strong> (Re-exported from <code>@floating-ui/dom</code>)</li><li>A string literal type representing the possible placement values for the popover (e.g., <code>&#39;top&#39;</code>, <code>&#39;bottom-start&#39;</code>, <code>&#39;right-end&#39;</code>).</li></ul></li><li><p><strong><code>Middleware</code></strong></p><ul><li><strong>Type:</strong> (Re-exported from <code>@floating-ui/dom</code>)</li><li>The type for middleware functions used by <code>@floating-ui/dom</code> for advanced positioning logic.</li></ul></li><li><p><strong><code>TourReactiveState</code></strong></p><ul><li>The interface describing the structure of the reactive <code>state</code> object returned by <code>useTour()</code>.</li><li><strong>Properties:</strong> <code>isActive</code>, <code>currentStepIndex</code>, <code>currentStep</code>, <code>totalSteps</code></li></ul></li></ul>`,14)]))}const g=t(n,[["render",r]]);export{u as __pageData,g as default};
